generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  email               String              @unique
  // personal info
  name                String
  password            Password?
  cpf                 String?
  rg                  String?
  passport            String?
  phoneNumber         String
  birthDate           String
  nacionality         String
  files               File[]
  foodRestrictions    FoodRestrictions?
  participationMethod ParticipationMethod
  // useful info
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  // delegation
  delegation          Delegation?         @relation(fields: [delegationId], references: [id])
  delegationId        String?             @db.ObjectId
  leader              Boolean             @default(false)
  // participation type
  delegate            Delegate?
  delegationAdvisor   DelegationAdvisor?
  // stripe
  stripeCustomerId    String?
  stripePaydId        String?
  stripePaymentsId    String[]
  // 
  confirmationCode    ConfirmationCode?
  changesMade         Notifications[]
  notifications       Notifications[]     @relation("user_change")
}

type ConfirmationCode {
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model FoodRestrictions {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String   @unique @db.ObjectId
  diet               String?
  allergy            Boolean?
  allergyDescription String?
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.ObjectId
  url       String?
  name      String
  fileName  String
  stream    Bytes
  size      Int
  createdAt DateTime @default(now())

  @@unique([name, userId])
}

model Password {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId
}

model Notifications {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  user               User        @relation(fields: [userId], references: [id])
  userId             String      @db.ObjectId
  seen               Boolean     @default(false)
  data               String
  description        String?
  type               String
  targetUser         User?       @relation("user_change", fields: [targetUserId], references: [id])
  targetUserId       String?     @db.ObjectId
  targetDelegation   Delegation? @relation("delegation_change", fields: [targetDelegationId], references: [id])
  targetDelegationId String?     @db.ObjectId
}

model Delegate {
  id                          String      @id @default(auto()) @map("_id") @db.ObjectId
  user                        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                      String      @unique @db.ObjectId
  emergencyContactName        String
  emergencyContactPhoneNumber String
  educationLevel              String
  currentYear                 String
  councilPreference           Council[]
  languagesSimulates          Languages[]
  Committee                   Committee?  @relation(fields: [committeeId], references: [id])
  committeeId                 String?     @db.ObjectId
  country                     String?
}

model Committee {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  delegates Delegate[]
  council   Council
  type      ParticipationMethod
  name      String              @unique
  createdAt DateTime            @default(now())
}

model DelegationAdvisor {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String      @unique @db.ObjectId
  advisorRole AdvisorRole @default(Professor)
  facebook    String?
  instagram   String?
  linkedin    String?
}

model Delegation {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  code                  String              @unique
  inviteLink            String
  school                String              @unique
  schoolPhoneNumber     String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  paymentExpirationDate DateTime
  participationMethod   ParticipationMethod
  address               Address?
  participants          User[]
  notifications         Notifications[]     @relation("delegation_change")
}

model Address {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  delegation   Delegation @relation(fields: [delegationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  delegationId String     @unique @db.ObjectId
  address      String
  city         String
  state        String
  postalCode   String?
  country      String
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String
}

enum AdvisorRole {
  Professor
  Coordenador
  Diretor
  Outro
}

enum Council {
  Assembleia_Geral_da_ONU
  Rio_92
  Conselho_de_Juventude_da_ONU
  Conselho_de_Seguranca_da_ONU
}

enum ParticipationMethod {
  Universidade
  Escola
}

enum Languages {
  Portugues
  Ingles
  Espanhol
}
